{"id":"I_kwDOB4HiUc5mtHWz","title":"`@vercel/og` Cheatsheet (?)","content":"1. [@vercel/og](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation)\r\n2. Edge Runtime 환경 기반으로 동작함.\r\n3. 이미지 렌더에 [satori](https://github.com/vercel/satori)를 사용하는데,\r\n   - react element를 `svg`로 변환하는 라이브러리이고,\r\n   - React Native의 Flexbox layout engine을 사용하므로, [css의 모든 기능을 사용할 순 없다](https://github.com/vercel/satori#css).\r\n      - e.g. `z-index`, `calc()` 등 사용 불가능.\r\n4. app router 사용시 `app/og/route.tsx` 혹은 `app/og.tsx` 등등으로 파일을 만들면 됨.\r\n   - `.ts`도 사용할 수 있으나 고러면 `jsx`를 사용할 수 없겟쥬\r\n5. 커스텀 폰트를 사용할 수 있으나 `next/font` 외에 별도로 로컬에서 폰트 파일을 가져와야 함. (리모트는 아직 안해봄)\r\n   - `.ttf`, `.woff` 사용 가능 (`.woff2`는 안됨)\r\n6. 대략의 api는 아래와 같음.\r\n   ```ts\r\n   new ImageResponse(\r\n     element: ReactElement,\r\n     options: {\r\n       width?: number = 1200\r\n       height?: number = 630\r\n       emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji', // emoji render에 어떤 lib을 사용할 것인지\r\n       fonts?: {\r\n         name: string,\r\n         data: ArrayBuffer, // 폰트 파일 데이터. fetch(URL).then(res => res.imageBuffer())로 가져오면 된다.\r\n         weight: number,\r\n         style: 'normal' | 'italic'\r\n       }[]\r\n       debug?: boolean = false // true 일 경우 각 element의 border, line-height 등이 표시됨. \r\n \r\n       status?: number = 200\r\n       statusText?: string\r\n       headers?: Record<string, string>\r\n     },\r\n   )\r\n   ```\r\n7. 대략의 사용례는 아래와 같음.\r\n    ```tsx\r\n    // app/og/route.tsx\r\n    import { ImageResponse } from 'next/server'; // app router 사용시 @verce/og가 포함되어 있음\r\n \r\n    export const runtime = 'edge';\r\n  \r\n    const font = fetch(new URL('../path/to/font/Font.woff', import.meta.url)).then(\r\n      (res) => res.arrayBuffer(),\r\n    );\r\n  \r\n    export async function GET(request: Request) {\r\n      const fontData = await font;\r\n\r\n      // query param으로 이런 저런 텍스트를 동적으로 넣을 수 있음.\r\n      const url = new URL(request.url)\r\n      const searchParams = url.searchParams\r\n      const title = searchParams.has(\"title\") ? searchParams.get(\"title\") : null\r\n  \r\n      return new ImageResponse(\r\n        (\r\n          <div\r\n            style={{\r\n            backgroundColor: 'white',\r\n            height: '100%',\r\n            width: '100%',\r\n            fontSize: 100,\r\n            fontFamily: '\"Font\"',\r\n            paddingTop: '100px',\r\n            paddingLeft: '50px',\r\n          }}\r\n         >\r\n           {title ? title : 'Hello World!'}\r\n         </div>\r\n       ),\r\n       {\r\n         width: 1200,\r\n         height: 630,\r\n         fonts: [\r\n           {\r\n             name: 'Font',\r\n             data: fontData,\r\n             style: 'normal',\r\n           },\r\n         ],\r\n       },\r\n     );\r\n   }\r\n   ```\r\n8. tailwind 사용이 가능한데 아직 `experimental`이 붙어있고 `className` 말고 `tw`를 사용하도록 되어있음.\r\n9. Hobby plan일 경우 [단일 function당 1MB 제한이 있어 한글 커스텀 폰트를 추가하긴 쉽지 않았음](https://www.sehyunchung.dev/til/I_kwDOB4HiUc5mg7RV).\r\n10. sehyunchung.dev에 적용해본 결과 -> https://sehyunchung.dev/og?title=암온더넧렙을&description=절대적룰을지켜","createdAt":"2023-05-24T03:05:23Z","labels":["react","tips and tricks","vercel","opengraph","next.js"]}