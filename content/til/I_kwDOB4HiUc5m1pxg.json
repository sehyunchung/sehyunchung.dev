{
  "id": "I_kwDOB4HiUc5m1pxg",
  "title": "Extracting Image Dimensions from Remote Sources",
  "content": "## Before\r\n- til을 위해 [repo issues](https://github.com/sehyunchung/til/issues)를 cms로 쓰고 있었고,\r\n- issue body render를 위해 github api reponse 중 `bodyHTML`을 `dangerously...` 에 넣어주고 있었음.\r\n- 근데 이러면 next가 해주는 이것저것이 아까우므로,\r\n- api response 중 `body`(markdown string)을 mdx renderer에 넘겨서 써야겠다고 생각.\r\n## Issues\r\n- [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote)를 쓰면 되고 딱히 별 문제는 없음([rsc도 지원](https://github.com/hashicorp/next-mdx-remote#react-server-components-rsc--nextjs-app-directory-support)).\r\n- 한가지, 이미지 최적화 기능을 위해선 [`next/image`](https://nextjs.org/docs/app/building-your-application/optimizing/images)를 써야하는데,\r\n- [static import일 경우엔 알아서 해주지만](https://nextjs.org/docs/app/building-your-application/optimizing/images#image-sizing),\r\n- [remote url일 경우엔 `width`/`height` 정보를 넘겨줘야함](https://nextjs.org/docs/app/building-your-application/optimizing/images#remote-images).\r\n- 근데 이걸 어떠케 알어요...\r\n## How?\r\n- [probe-image-size](https://www.npmjs.com/package/probe-image-size)라는 라이브러리가 있고,\r\n- mdx renderer option의 `component` 설정시 `<img />` -> `<Image />`로 replace 하면서 요걸 사용해서 `width`/`height` 정보를 넘겨주면 됨.\r\n- 코드는 대충 이런식:\r\n  ```tsx\r\n  import probe from \"probe-image-size\"\r\n  // ...\r\n  const components: MDXRemoteProps[\"components\"] = {\r\n    // ...\r\n    // @ts-expect-error <- ts는 아직 async 컴포넌트를 모르지만 우리는 rsc 세계로 넘어왔으므로 ok.\r\n    img: async ({ src, alt }) => {\r\n      if (!src) return null\r\n\r\n      const { width, height } = await probe(src ?? \"\")\r\n      //                        ^^^^^ rsc ftw...\r\n\r\n      if (!width || !height) return null\r\n\r\n      return <Image src={src} alt={alt ?? \"\"} width={width} height={height} />\r\n    },\r\n    // ...\r\n  }\r\n  // ...\r\n  ```\r\n## Result\r\n최종 렌더된 이미지의 url을 보면\r\n\r\n<img width=\"397\" alt=\"Screenshot 2023-05-25 at 17 18 40\" src=\"https://github.com/sehyunchung/til/assets/31644638/d85608cd-91d1-408c-899f-2771400c48f1\"/>\r\n\r\nnext가 잘 처리하고 있음을 알 수 있음.\r\n\r\n## Conclusion\r\nRSC는 대박이다...\r\n",
  "createdAt": "2023-05-25T08:28:45Z",
  "labels": [
    "next.js",
    "mdx",
    "image optimization"
  ]
}