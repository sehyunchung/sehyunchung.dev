{"id":"I_kwDOB4HiUc5nmlmG","title":"`blurDataUrl` 만들기","content":"갯츠비는 알아서 해주지만 넥스트는 해줘야 되기 때문에...\r\n\r\n```ts\r\nimport { decode, encode } from \"blurhash\"\r\nimport sharp from \"sharp\"\r\n\r\nconst loadImageData = async (src: string) => {\r\n  const response = await fetch(src)\r\n  if (!response.ok)\r\n    throw new Error(\r\n      `Failed to load image: ${response.status} ${response.statusText}`\r\n    )\r\n\r\n  const imageBuffer = await response.arrayBuffer()\r\n\r\n  const { data, info } = await sharp(imageBuffer)\r\n    .ensureAlpha()\r\n    .raw()\r\n    .toBuffer({ resolveWithObject: true })\r\n\r\n  return {\r\n    data: new Uint8ClampedArray(data),\r\n    width: info.width,\r\n    height: info.height,\r\n  }\r\n}\r\n\r\nexport const encodeImageToBlurhash = async (imageUrl: string) => {\r\n  const { data, width, height } = await loadImageData(imageUrl)\r\n  return encode(data, width, height, 4, 4)\r\n}\r\n\r\nexport const blurhashToBase64 = async (\r\n  blurhash: string,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const pixels = decode(blurhash, width, height)\r\n  const webp = sharp(Buffer.from(pixels), {\r\n    raw: { width, height, channels: 4 },\r\n  }).webp()\r\n  const dataString = (await webp.toBuffer()).toString(\"base64\")\r\n\r\n  return `data:image/png;base64,${dataString}`\r\n}\r\n\r\nexport const generateBlurDataUrl = async (\r\n  imageUrl: string\r\n): Promise<string | undefined> => {\r\n  try {\r\n    const blurhash = await encodeImageToBlurhash(imageUrl)\r\n    return await blurhashToBase64(blurhash, 4, 4)\r\n  } catch (error) {\r\n    console.error(error)\r\n    return undefined\r\n  }\r\n}\r\n\r\n```\r\n\r\n여러가지 더 있다.\r\n\r\n- [blurhash](https://github.com/woltapp/blurhash)\r\n- [thumbhash](https://evanw.github.io/thumbhash/)\r\n- [lqip-modern](https://github.com/transitive-bullshit/lqip-modern)\r\n- [@unpic-placeholder](https://github.com/ascorbic/unpic-placeholder)\r\n- 등등","createdAt":"2023-06-02T13:05:14Z","labels":["next.js","image optimization","sharp"]}