{"id":"I_kwDOB4HiUc5nsT7A","title":"🫠 Hydration Mismatch 🫠 (2)","content":"[요기](/til/I_kwDOB4HiUc5noRP4)서 이것 저것 해봤는데 다 별로인 것 같다. 왜냐면 다 hydration mismatch를 해결하는 게 아니고 피해가는 것이기 때문인듯...\r\n\r\n그러니까 애시당초 'mismatch'가 발생하는 건\r\n\r\n1. client state가 client에서만 액세스 가능한 곳에 persist 되어있어서\r\n2. server에서 액세스가 안되니까\r\n3. UI 상태가 달라질 수 밖에 없다.\r\n\r\n인데 그렇다면\r\n\r\n1. client state persist를\r\n2. server에서 액세스 가능한 곳에 하면 되는 것잉게롱.\r\n\r\n그래서 좀 손이 가지만 걍 이렇게 해봤는데,\r\n\r\n1. persist엔 `cookie`를 사용한다.\r\n4. 왜냐면 쿠키는 서버 컴포넌트에서 읽기 가능이므로. 암튼 그래서 플로우는,\r\n1. 서버 컴포넌트에서 `cookie`를 읽어서 고 안에 들어있는 persisted state를 가져온다.\r\n3. mismatch가 발생하는 클라이언트 컴포넌트에 위 state를 넘겨줄 prop을 하나 뚫는다.\r\n5. 그리고 같은 클라이언트 컴포넌트에 `useState`로 local state를 하나 만드는데,\r\n6. 만들면서 initialState로 위 서버 컴포넌트에서 받아온 prop을 넘겨준다.\r\n7. `useEffect`를 하나 추가해서\r\n8. 클라이언트 컴포넌트가 쓰고 있는 persisted store을 local state에 묶어준다.\r\n9. 깅까 대략\r\n   ```ts\r\n   export function useSyncedState<T>(clientState: T, serverState?: T) {\r\n     const [state, setState] = React.useState<T>(serverState ?? clientState)\r\n\r\n     React.useEffect(() => {\r\n       setState(clientState)\r\n     }, [clientState])\r\n \r\n     return state\r\n   }\r\n   ```\r\n11. 왈료\r\n\r\n이러면\r\n1. 어차피 서버도 클라이언트도 같은 걸 보고 있으므로 애시당초 mismatch가 아님.\r\n2. hydration이 되기 전에 이미 같은 상태의 UI가 보이므로 깜빡임 같은 게 없음.\r\n\r\n<BoxDrawn variant=\"arrow\" cols={15} rows={5} className=\"text-xl font-bold m-8\">굳</BoxDrawn>\r\n\r\n---\r\n근데:\r\n\r\n1. 서버 호출을 해야 됨\r\n1. 그래서 요렇게 한 컴포넌트가 들어있는 페이지는 static export가 안됨","createdAt":"2023-06-03T16:41:00Z","labels":["react","RSC","next.js","cookie"]}